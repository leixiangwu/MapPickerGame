package ramble_on_account;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Leixiang
 */
public class AccountsImporterExporter {

    public static final String ACCOUNTS_DATA_PATH = "./data";
    public static final String SETUP_DELIMITER = "\\|";
    public static final String GO_NEXT_LINE = "\n";
    public static final String FLAG_MODE = "FLAG_MODE";
    public static final String CAPITAL_MODE = "CAPITAL_MODE";
    public static final String SUB_REGION_MODE = "SUB_REGION_MODE";
    public static final String LEADER_MODE = "LEADER_MODE";
    public static final String TEXT_FORMAT_NAME = "txt";

    public AccountsImporterExporter() {
    }

    public boolean loadAccounts(AccountManager manager) {
        String files;
        File folder = new File(ACCOUNTS_DATA_PATH);
        File[] listOfFiles = folder.listFiles();

        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile()) {
                files = listOfFiles[i].getName();
                if (files.endsWith(".txt") || files.endsWith(".TXT")) {
                    files = ACCOUNTS_DATA_PATH + files;
                    return loadAccountsIntoManager(files, manager);
                }
            }
        }
        return false;
    }

    private boolean loadAccountsIntoManager(String fileToLoad, AccountManager manager) {
        // We will reuse these instances.
        FileReader fr;
        BufferedReader reader;
        String accountName, regionName, line, mode;
        String[] lineData;
        RegionStats regionStats;
        int highestScore, numOfTimesPlayed, fastestTime, numModes, numRegions;
        try {
            fr = new FileReader(fileToLoad);
            reader = new BufferedReader(fr);
            line = reader.readLine();
            lineData = line.split(SETUP_DELIMITER);
            accountName = lineData[0];

            // create the account, since we know the name.
            Account account = new Account(accountName);

            // add the account to the manager.
            manager.addAccount(accountName, account);
            numRegions = Integer.parseInt(lineData[1]);
            for (int i = 0; i < numRegions; i++) {
                line = reader.readLine();
                lineData = line.split(SETUP_DELIMITER);
                regionName = lineData[0];
                numModes = Integer.parseInt(lineData[1]);
                for (int z = 0; z < numModes; z++) {
                    line = reader.readLine();
                    lineData = line.split(SETUP_DELIMITER);
                    mode = lineData[0];
                    numOfTimesPlayed = Integer.parseInt(lineData[1]);
                    highestScore = Integer.parseInt(lineData[2]);
                    fastestTime = Integer.parseInt(lineData[3]);
                    regionStats = createRegionStats(numOfTimesPlayed, highestScore, fastestTime);
                    loadModeDataHelper(account, regionName, mode, regionStats);
                }
            }
            reader.close();
            return true;
        } catch (FileNotFoundException ex) {
            System.out.println("File Not Found");
            return false;
        } catch (IOException e) {
            System.out.println("File Format Error Found");
            return false;
        }
    }

    private RegionStats createRegionStats(int numPlayed, int score, int time) {
        RegionStats stats = new RegionStats(numPlayed, score, time);
        return stats;
    }

    private void loadModeDataHelper(Account account, String regionName, String mode, RegionStats stats) {
        // WHICH MODE IS IT?
        switch (mode) {
            case FLAG_MODE:
                account.addFlagModeStats(regionName, stats);
                break;
            case SUB_REGION_MODE:
                account.addSubRegionModeStats(regionName, stats);
                break;
            case LEADER_MODE:
                account.addLeaderModeStats(regionName, stats);
                break;
            case CAPITAL_MODE:
                account.addCapitalModeStats(regionName, stats);
                break;
            default:
                System.out.println("Invalid Mode");
                break;
        }
    }

    public boolean saveAccounts(AccountManager manager) {

        for (Account account : manager.getAllAccounts()) {
            return writeAccountInfo(account);
        }
        return false;
    }

    public boolean writeAccountInfo(Account account) {
        FileWriter fw;
        BufferedWriter writer;
        File file;

        String filePathName = ACCOUNTS_DATA_PATH + account.getAccountName() + TEXT_FORMAT_NAME;
        file = new File(filePathName);

        //does the file exist? if it does, we delete and make a new file.
        if (file.exists()) {
            file.delete();
        }
        // Now the file has empty content.
        file = new File(filePathName);
        try {
            fw = new FileWriter(filePathName);
            writer = new BufferedWriter(fw);
            writer.write(account.getAccountName() + SETUP_DELIMITER + account.getRegionPlayedSize() + GO_NEXT_LINE);
            writeAccountInfoHelper(writer, account);
        } catch (IOException ex) {
            System.out.println("Error : File Format Exception");
        }
        return false;
    }

    private void writeAccountInfoHelper(BufferedWriter writer, Account account) {
        String accountName, regionName, line, mode;
        String[] lineData;
        RegionStats regionStats;
        int highestScore, numOfTimesPlayed, fastestTime, numModes, numRegions;

        Iterator<String> iterator = account.getAllRegionsPlayed();
        while (iterator.hasNext()) {
            regionName = iterator.next();
            if (account.getCapitalModeStats(regionName) != null) {
            }
            account.getFlagModeStats(regionName);
            account.getSubRegionModeStats(regionName);
            account.getLeaderModeStats(regionName);


        }
    }

    private void writerRegionStats(BufferedWriter writer, RegionStats stats) {
        String stringToWrite = stats.getNumberOfTimesPlayed() + SETUP_DELIMITER
                + stats.getHighestScore() + SETUP_DELIMITER + stats.getFastestTime();


    }
}
