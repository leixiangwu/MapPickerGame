/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ramble_on;

import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.image.BufferedImage;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import java.awt.Dimension;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeModel;
import mini_game.*;
import static ramble_on.RambleOnSettings.*;
import ramble_on_account.Account;
import ramble_on_events.CreateNewAccountHandler;
import ramble_on_events.GoBackHandler;
import ramble_on_events.GoForwardHandler;
import ramble_on_events.GoToAccountCreationHandler;
import ramble_on_events.SelectAccountHandler;
import ramble_on_events.WorldTreeHandler;

/**
 *
 * @author Leixiang
 */
public class RambleOn extends MiniGame {

    private JScrollPane worldTreeScrollPane;
    private JTree worldTree;
    private JLabel flagModeLabel;
    private JLabel subRegionModeLabel;
    private JLabel leaderModeLabel;
    private JLabel capitalModeLabel;
    private JLabel fastestTimeLabel;
    private JLabel highestScoreLabel;
    private JLabel numOfTimesPlayedLabel;
    private DefaultTreeModel worldTreeModel;
    private JButton createButton;
    private JButton okButton;
    private JButton cancelButton;
    private JButton selectButton;
    private JTextField accountNameField;
    private JList accountsList;
    private JScrollPane scroll;
    private JPanel secondPanel;

    public RambleOn() {
        // CALL MiniGame CONSTRUCTOR
        super(APP_TITLE, FRAME_RATE);
    }

    /**
     * @param args the command line arguments
     */
    /**
     * Initializes the complete data model for this application, forcing the
     * setting of all game data, including all needed SpriteType objects.
     */
    @Override
    public void initData() {
        // INIT OUR DATA MANAGER
        data = new RambleOnDataModel();
        data.setGameDimensions(GAME_WIDTH, GAME_HEIGHT);


        boundaryLeft = 0;
        boundaryRight = GAME_WIDTH;
        boundaryTop = 0;
        boundaryBottom = GAME_HEIGHT;

        initTree();

    }

    @Override
    public void initGUIControls() {
        // CONSTRUCT THE PANEL WHERE WE'LL DRAW EVERYTHING
        canvas = new RambleOnPanel(this, (RambleOnDataModel) data);

        initLabels();

        secondPanel = new JPanel();
        secondPanel.setLayout(new GridBagLayout());

        accountNameField = new JTextField(10);

        okButton = new JButton("OK");
        cancelButton = new JButton("Cancel");
        createButton = new JButton("Create");
        selectButton = new JButton("Select");

        RambleOnDataModel rambleData = (RambleOnDataModel) data;
        Vector<String> accountNames = new Vector();
        for (Account account : rambleData.getAccountManager().getAllAccounts()) {
            accountNames.add(account.getAccountName());
        }

        accountsList = new JList(accountNames);
        accountsList.setBorder(BorderFactory.createEtchedBorder());
        scroll = new JScrollPane(accountsList);
        scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        addComponentToRegionEditorPanel(okButton, 0, 0, 1, 1);
        addComponentToRegionEditorPanel(cancelButton, 0, 1, 1, 1);
        addComponentToRegionEditorPanel(createButton, 0, 2, 1, 1);
        addComponentToRegionEditorPanel(selectButton, 0, 3, 1, 1);
        addComponentToRegionEditorPanel(scroll, 1, 0, 3, 3);

        canvas.add(worldTree);

        /*setACScreenButtonsInvisible();
         setAccountsScreenGUIInvisible();
         */ // WE'LL REUSE THESE GUYS
        SpriteType sT;
        BufferedImage img;
        int x, y, vX, vY;
        Sprite s;

        sT = new SpriteType(WELCOME_TYPE);
        img = loadImage(WELCOME_FILE_PATH);
        x = 0;
        y = 0;
        vX = 0;
        vY = 0;
        sT.addState(VISIBLE_STATE, img);
        s = new Sprite(sT, x, y, vX, vY, VISIBLE_STATE);
        guiButtons.put(WELCOME_TYPE, s);

        // FIRST LOAD THE BACKGROUND, WHICH IS GUI DECOR
        sT = new SpriteType(BACKGROUND_TYPE);
        img = loadImage(BACKGROUND_FILE_PATH);
        x = 0;
        y = 0;
        vX = 0;
        vY = 0;
        sT.addState(VISIBLE_STATE, img);
        s = new Sprite(sT, x, y, vX, vY, VISIBLE_STATE);
        guiDecor.put(BACKGROUND_TYPE, s);

    }

    @Override
    public void initGUIHandlers() {
        GoForwardHandler gfh = new GoForwardHandler((RambleOnDataModel) data, this);
        guiButtons.get(WELCOME_TYPE).setActionListener(gfh);

        GoToAccountCreationHandler gtach = new GoToAccountCreationHandler((RambleOnDataModel) data, this);
        createButton.addActionListener(gtach);

        GoBackHandler gbh = new GoBackHandler((RambleOnDataModel) data, this);
        cancelButton.addActionListener(gbh);

        CreateNewAccountHandler cnah = new CreateNewAccountHandler(this, (RambleOnDataModel) data, accountNameField);
        okButton.addActionListener(cnah);

        SelectAccountHandler sach = new SelectAccountHandler((RambleOnDataModel) data, this, accountsList);
        selectButton.addActionListener(sach);
    }

    @Override
    public void reset() {
        RambleOnDataModel rambleData = (RambleOnDataModel) data;
        Vector<String> accountNames = new Vector();
        for (Account account : rambleData.getAccountManager().getAllAccounts()) {
            accountNames.add(account.getAccountName());
        }
        accountsList = new JList(accountNames);
        accountsList.setBorder(BorderFactory.createEtchedBorder());
    }

    @Override
    public void updateGUI() {
    }

    public void setACScreenButtonsVisible() {
        okButton.setVisible(true);
        cancelButton.setVisible(true);
        accountNameField.setVisible(true);
    }

    public void setACScreenButtonsInvisible() {
        okButton.setVisible(false);
        cancelButton.setVisible(false);
        accountNameField.setVisible(false);
    }

    public void setAccountsScreenGUIVisible() {
        accountsList.setVisible(true);
        selectButton.setVisible(true);
        createButton.setVisible(true);
    }

    public void setAccountsScreenGUIInvisible() {
        accountsList.setVisible(false);
        selectButton.setVisible(false);
        createButton.setVisible(false);
    }

    public void setCurrentAccountGUIInvisible() {
        flagModeLabel.setVisible(false);
        subRegionModeLabel.setVisible(false);
        leaderModeLabel.setVisible(false);
        capitalModeLabel.setVisible(false);

        fastestTimeLabel.setVisible(false);
        highestScoreLabel.setVisible(false);
        numOfTimesPlayedLabel.setVisible(false);

    }

    public void setCurrentAccountGUIVisible() {
        flagModeLabel.setVisible(true);
        subRegionModeLabel.setVisible(true);
        leaderModeLabel.setVisible(true);
        capitalModeLabel.setVisible(true);
        
        fastestTimeLabel.setVisible(true);
        highestScoreLabel.setVisible(true);
        numOfTimesPlayedLabel.setVisible(true);

    }

    public JButton getOkButton() {
        return okButton;
    }

    public JButton getCancelButton() {
        return cancelButton;
    }

    public JButton getSelectButton() {
        return selectButton;
    }

    public JButton getCreateButton() {
        return createButton;
    }
    /**
     * Helper method used for organizing components inside the region editor
     * panel, which uses GridBagLayout.
     *
     * @param componentToAdd Component we're putting inside the panel
     *
     * @param col Column location to put the component.
     *
     * @param row Row location to put the component.
     *
     * @param colSpan Number of columns the component will span.
     *
     * @param rowSpan Number of rows the component will span.
     */
    public static final int REGION_EDITOR_CONTROLS_IPADX = 5;
    public static final int REGION_EDITOR_CONTROLS_IPADY = 10;
    public static final Insets REGION_CONTROLS_INSETS = new Insets(5, 15, 5, 15);
    public static final Insets REGION_TEXT_FIELD_MARGINS = new Insets(0, 5, 0, 5);

    private void addComponentToRegionEditorPanel(Component componentToAdd,
            int col, int row, int colSpan, int rowSpan) {
        // EMPLOY GRID BAG LAYOUT TO PUT IT IN THE PANEL
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = col;
        gbc.gridy = row;
        gbc.gridwidth = colSpan;
        gbc.gridheight = rowSpan;
        gbc.ipadx = REGION_EDITOR_CONTROLS_IPADX;
        gbc.ipady = REGION_EDITOR_CONTROLS_IPADY;
        gbc.insets = REGION_CONTROLS_INSETS;
        gbc.fill = GridBagConstraints.BOTH;
        secondPanel.add(componentToAdd, gbc);
    }

    public static void main(String[] args) {
        RambleOn game = new RambleOn();
        game.startGame();
    }

    public void changePanel() {
    }

    private void initTree() {
        // INIT THE TREE
        worldTree = new JTree();

        // MAKE IT SCROLLABLE
        worldTreeScrollPane = new JScrollPane(worldTree);

        // AND HOOK UP THE TREE LISTENER
        WorldTreeHandler treeHandler = new WorldTreeHandler(this);
        worldTree.addTreeSelectionListener(treeHandler);
    }

    public void displayRegionStats() {
        RambleOnDataModel realData = (RambleOnDataModel) data;
        realData.getAccountManager().getCurrentAccount();

    }

    private void initLabels() {
        flagModeLabel = new JLabel(FLAG_MODE);
        subRegionModeLabel = new JLabel(SUB_REGION_MODE);
        leaderModeLabel = new JLabel(LEADER_MODE);
        capitalModeLabel = new JLabel(CAPITAL_MODE);

        fastestTimeLabel = new JLabel(FASTEST_TIME);
        highestScoreLabel = new JLabel(HIGHEST_SCORE);
        numOfTimesPlayedLabel = new JLabel(NUM_PLAYED);

        canvas.add(flagModeLabel);

        canvas.add(subRegionModeLabel);

        canvas.add(leaderModeLabel);

        canvas.add(capitalModeLabel);


        canvas.add(fastestTimeLabel);

        canvas.add(highestScoreLabel);

        canvas.add(numOfTimesPlayedLabel);

        setCurrentAccountGUIInvisible();
    }
}
