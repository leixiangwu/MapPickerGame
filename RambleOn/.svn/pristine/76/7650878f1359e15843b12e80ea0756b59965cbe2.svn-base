/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rambleon;

import java.awt.image.BufferedImage;
import mini_game.*;
import static rambleon.RambleOnSettings.*;

/**
 *
 * @author Leixiang
 */
public class RambleOn extends MiniGame {

    public RambleOn() {
        // CALL MiniGame CONSTRUCTOR
        super(APP_TITLE, FRAME_RATE);
    }

    /**
     * @param args the command line arguments
     */
    /**
     * Initializes the complete data model for this application, forcing the
     * setting of all game data, including all needed SpriteType objects.
     */
    @Override
    public void initData() {
        // INIT OUR DATA MANAGER
        data = new RambleOnDataModel();
        data.setGameDimensions(GAME_WIDTH, GAME_HEIGHT);

        boundaryLeft = 0;
        boundaryRight = GAME_WIDTH;
        boundaryTop = 0;
        boundaryBottom = GAME_HEIGHT;

    }

    @Override
    public void initGUIControls() {
        // CONSTRUCT THE PANEL WHERE WE'LL DRAW EVERYTHING
        canvas = new RambleOnPanel(this, (RambleOnDataModel) data);

        // WE'LL REUSE THESE GUYS
        SpriteType sT;
        BufferedImage img;
        int x, y, vX, vY;
        Sprite s;

        // FIRST LOAD THE BACKGROUND, WHICH IS GUI DECOR
        sT = new SpriteType(WELCOME_TYPE);
        img = loadImage(WELCOME_FILE_PATH);
        x = 0;
        y = 0;
        vX = 0;
        vY = 0;
        sT.addState(VISIBLE_STATE, img);
        s = new Sprite(sT, x, y, vX, vY, VISIBLE_STATE);
        guiDecor.put(WELCOME_TYPE, s);

    }

    @Override
    public void initGUIHandlers() {
    }

    @Override
    public void reset() {
    }

    @Override
    public void updateGUI() {
    }

    public static void main(String[] args) {
        RambleOn game = new RambleOn();
        game.startGame();
    }
}
